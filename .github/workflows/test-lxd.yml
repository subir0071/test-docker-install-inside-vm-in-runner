name: Test LXD Provision

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  lxd-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install LXD
        run: |
          sudo snap install lxd
          # Wait for LXD daemon to start
          echo "Waiting for LXD daemon to start..."
          sleep 15
          # Initialize LXD with default settings
          sudo lxd init --auto
          # Add runner to lxd group
          sudo usermod -a -G lxd runner
          # Fix socket permissions for CI environment
          sudo chmod 666 /var/snap/lxd/common/lxd/unix.socket
          # Test basic LXD functionality
          sudo lxc list

      - name: Launch LXD VM
        run: |
          sudo lxc launch ubuntu:24.04 test-vm --vm

      - name: Wait for VM to be ready
        run: |
          echo "Waiting for VM to be fully initialized..."

          # Debug: Check VM status
          echo "=== VM Status ==="
          sudo lxc list
          sudo lxc info test-vm

          # We check for basic readiness instead of waiting for cloud-init completion
          timeout=300
          elapsed=0
          while [ $elapsed -lt $timeout ]; do
            # Debug: Show what we're checking
            echo "=== Checking VM readiness (attempt $((elapsed/10 + 1))) ==="
            
            # Check if VM is running and we can execute commands
            if sudo lxc list --format=csv | grep -q "test-vm.*RUNNING"; then
              echo "VM is in RUNNING state"
              
              # Try to execute a simple command to verify VM is responsive
              if sudo lxc exec test-vm -- echo "VM is responsive" 2>/dev/null; then
                echo "VM is responsive to commands"
                
                # Check if basic system is ready (systemd, if available)
                if sudo lxc exec test-vm -- systemctl is-system-running --wait 2>/dev/null || true; then
                  echo "VM system is ready!"
                  break
                else
                  echo "VM system not fully ready yet, but responsive"
                  # For basic VMs, being responsive might be enough
                  if [ $elapsed -ge 60 ]; then  # After 60 seconds, if responsive, consider ready
                    echo "VM has been responsive for sufficient time, considering ready"
                    break
                  fi
                fi
              else
                echo "VM not responsive to commands yet"
              fi
            else
              echo "VM not in RUNNING state yet"
            fi
            
            echo "Waiting for VM to be ready... ($elapsed/$timeout seconds)"
            sleep 10
            elapsed=$((elapsed + 10))
          done

          if [ $elapsed -ge $timeout ]; then
            echo "=== TIMEOUT DEBUGGING ==="
            echo "Final VM status:"
            sudo lxc list
            sudo lxc info test-vm
            echo "Timeout waiting for VM to be ready"
            exit 1
          fi

          echo "VM is ready for use!"

      - name: Test basic VM functionality
        run: |
          echo "=== Testing basic VM functionality ==="
          sudo lxc exec test-vm -- bash -c "echo Hello from LXD VM"
          sudo lxc exec test-vm -- bash -c "uname -a"
          sudo lxc exec test-vm -- bash -c "cat /etc/os-release"

      - name: Install Docker inside VM
        run: |
          echo "=== Installing Docker inside VM ==="

          # Update package manager and install prerequisites
          echo "--- Updating package manager ---"
          sudo lxc exec test-vm -- bash -c "apt-get update -y"

          echo "--- Installing prerequisites ---"
          sudo lxc exec test-vm -- bash -c "apt-get install -y ca-certificates curl"

          # Add Docker's official GPG key
          echo "--- Adding Docker GPG key ---"
          sudo lxc exec test-vm -- bash -c "install -m 0755 -d /etc/apt/keyrings"
          sudo lxc exec test-vm -- bash -c "curl -fsSL https://download.docker.com/linux/ubuntu/gpg -o /etc/apt/keyrings/docker.asc"
          sudo lxc exec test-vm -- bash -c "chmod a+r /etc/apt/keyrings/docker.asc"

          # Add the Docker repository to Apt sources
          echo "--- Adding Docker repository ---"
          sudo lxc exec test-vm -- bash -c 'echo "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/ubuntu $(. /etc/os-release && echo "$VERSION_CODENAME") stable" | tee /etc/apt/sources.list.d/docker.list > /dev/null'

          # Update package index again
          echo "--- Updating package index with Docker repository ---"
          sudo lxc exec test-vm -- bash -c "apt-get update -y"

          # Install Docker packages
          echo "--- Installing Docker packages ---"
          sudo lxc exec test-vm -- bash -c "apt-get install -y docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin"

          echo "Docker installation completed!"

      - name: Verify Docker installation
        run: |
          echo "=== Verifying Docker installation ==="

          # Check Docker version
          echo "--- Docker version ---"
          sudo lxc exec test-vm -- bash -c "docker --version"

          # Check Docker service status
          echo "--- Docker service status ---"
          sudo lxc exec test-vm -- bash -c "systemctl status docker --no-pager"

          # Test Docker functionality
          echo "--- Testing Docker functionality ---"
          sudo lxc exec test-vm -- bash -c "docker info"

          echo "--- Running test container ---"
          sudo lxc exec test-vm -- bash -c "docker run --rm hello-world"

          echo "Docker verification completed successfully!"

      - name: Docker installation diagnostics
        if: always()
        run: |
          echo "=== Docker installation diagnostics ==="

          # Check if Docker daemon is running
          echo "--- Docker daemon process ---"
          sudo lxc exec test-vm -- bash -c "ps aux | grep docker" || true

          # Check Docker logs
          echo "--- Docker service logs ---"
          sudo lxc exec test-vm -- bash -c "journalctl -u docker.service --no-pager -n 50" || true

          # Check available disk space
          echo "--- Disk usage ---"
          sudo lxc exec test-vm -- bash -c "df -h" || true

          # Check memory usage
          echo "--- Memory usage ---"
          sudo lxc exec test-vm -- bash -c "free -h" || true

          # Network connectivity test
          echo "--- Network connectivity test ---"
          sudo lxc exec test-vm -- bash -c "curl -I https://download.docker.com/linux/ubuntu/gpg" || true

      - name: Stop and delete VM
        if: always()
        run: |
          echo "=== Cleaning up VM ==="
          sudo lxc stop test-vm || true
          sudo lxc delete test-vm || true
